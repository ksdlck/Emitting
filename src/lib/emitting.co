ex = exports? and exports or window

class ex.Emitting
  _divargs: (...args)->
    if args.length is 2
      if args[0] instanceof Array and args[0].length is 0 or typeof args[0][0] is \number
        args[[0] 1]
      else
        args[0 1]
    else
      [(args.slice 0 -1), args[* - 1]]
  on: ->
    [ev, proc] = @_divargs ...
    for c of ev
      switch typeof c
        when \string
        when \number
        when \object
      @.@@evs.
    console.log "on:\n  ev: #{JSON.stringify ev}\n  proc: #proc"
    @
  off: ->
    [ev, proc] = @_divargs ...
    console.log "off:\n  ev: #ev\n  proc: #proc"
    @
  many: !(ev, times, proc) ->
    _proc = ! ~>
      proc ...
      if --times is 0
        @off _proc
    @on ev _proc
  once: !(ev, proc) ->
    _proc = ! ~>
      proc ...
      @off _proc
    @on ev _proc

e = new Emitting

e.on 0 !-> console.log "ANY TOP-LEVEL EVENT"
e.on \test 2 0 console.log "ANY TEST-NAMESPACE EVENT WITH AT LEAST TWO SUB-COMPONENTS"

# non namespace-spanning wildcard
e.on [[1]] !-> console.log "ANY TOP-LEVEL EVENT"
e.on [1] !-> console.log "ANY TOP-LEVEL EVENT"

# namespace-spanning wildcard
e.on [[]] !-> console.log "ANY EVENT"
e.on [] !-> console.log "ANY EVENT"

# pattern match
e.on [[] \test] !-> console.log "TEST EVENT IN ANY NAMESPACE"
e.on [] \test !-> console.log "TEST EVENT IN ANY NAMESPACE"

e.on [\test []] !-> console.log "ANY EVENT IN THE TEST TOP-LEVEL NAMESPACE"
e.on \test [] !-> console.log "ANY EVENT IN THE TEST TOP-LEVEL NAMESPACE"
