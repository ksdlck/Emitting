ex = exports? and exports or window

class ex.Emitting
  on: (ev, proc)->
    ev = [ev] if typeof ev is \string
    #console.log "on:\n  ev: #{JSON.stringify ev}\n  proc: #proc"
    spec = @.@evs
    for c of ev
      switch typeof c
        case \string
          spec.@s[c] = (next = {})
        case \number
          spec.@@n.push [c, (next = {})]
      spec = next
    spec.p = proc
    @
  off: (ev, proc)->
    ev = [ev] if typeof ev is \string
    #console.log "off:\n  ev: #ev\n  proc: #proc"
    # TODO
    @
  _emit: !(ev, idx, spec, args)->
    #console.log "_emit #{util.inspect @@, false, null}"
    if ev.length - idx is 0
      spec.p ...args if spec.p
    else
      spec.s and (next = spec.s[ev[idx]]) and @_emit ev, idx + 1, next, args
      spec.n and for [num, next] of spec.n
        @_emit ev, (if num is 0 then ev.length else idx + num), next, args if num + idx <= ev.length
  emit: (ev, ...args)->
    ev = [ev] if typeof ev is \string
    @_emit ev, 0, @.@evs, args
    @
  many: (ev, times, proc) ->
    _proc = ! ~>
      proc ...
      if --times is 0
        @off ev _proc
    @on ev _proc
  one: !(ev, proc) ->
    _proc = ! ~>
      proc ...
      @off ev _proc
    @on ev _proc

####################################### TEST ##########################################

util = require \util
e = new Emitting

argemit = !(arg)->
  e.emit arg, arg

argon = !(arg, descr)->
  e.on arg, !(ev)-> console.log "event: #{descr or util.inspect arg, false, null}: #{util.inspect ev, false, null}"

argon [0] "event: any event"
argon [1] "event: top-level event"
argon [\test 2 0] "event: any test-namespace event with at least two sub-components"
argon [\test] "event: test"
argon [\test \a \b] "event: any test.a.b event"
argon [\test 2 \c] "event: any test.2.c event"

console.log "--------------------------------------------------------------"
argemit [\rofl]
console.log "--------------------------------------------------------------"
argemit [\test]
console.log "--------------------------------------------------------------"
argemit [\test \a]
console.log "--------------------------------------------------------------"
argemit [\test \a \b]
console.log "--------------------------------------------------------------"
argemit [\test \a \b \c]
console.log "--------------------------------------------------------------"
